CATATAN PENGALAMAN IT

- MASALAH BESAR SAAT INI
1. MASALAH DEPENDENSI JIKA SERING BERGANTUNG PADA
LIBRARY PIHAK 3 MAKA SIAP-SIAP PUSING MASALAH STABILITAS VERSI

2. MASALAH LIBRARY PIHAK KETIGA YANG BERCABANG
CONTOH :
SATU LIBRARY ATAU DEPENDENSI BISA BERGANTUNG PADA BEBERAPA
DEPENDENSI LAIN DAN INI MASALAH KARNA AKAN MEMBUAT BERAT
RENDER BUILD

3. KONSISTENSI STYLE CODING HARUS SAMA DAN BUTUH BAHASA
PEMROGRAMAN YANG TIDAK KESERINGAN GONTA-GANTI SINTAK FITUR
ATAU HAPUS FITUR JIKA TUJUAN UNTUK ENTERPRISE

- JIKA CODING EROR TERAPKAN SATI (SEARCH,ANALYST,TRY,INTUITION)
1. CEK SINTAKS SECARA TELITI
2. CEK VERSI JIKA BEDA BAKAL EROR
3. CEK LIBRARY
4. CEK SUPPORT ATAU TIDAK DGN GOOGLING KODE EROR NYA
5. CEK TIPE DATA BAIK DB DAN CODING SERTA PARAMETERNYA
6. CEK AKSES HEADER ADA CORS DLL
7. CEK VARIABEL APAKAH SAMA DGN VARIABEL BAWAAN PHP/NODE DLL
8. CEK APAKAH IP DARI API DI BLOKIR HOSTING/SERVER NYA

8. CEK DENGAN METODE TRIK JIKA SEMUA SUDAH BENAR TAPI EROR MAKA PAKAI TRIK
SOLUSINYA CONTOH AKSES PATH "./image.png" EROR maka pake alternatif > dirname(__FILE__)."/image.png" UNTUK PHP

9. CEK IQ (KDG KITA MERASA SDH BENAR SEMUA
TAPI BODOH DALAM BEBERAPA SISI)

10. JIKA INGIN MEMANGGIL FUNGSI DI FILE LAIN PERTAMA HARUS require("path"); LALU JGN LUPA
SELECTOR FILE UBAH SESUAI LOKASI FILE PEMANGGIL "../" JADI "./"

CONTOH KASUS :
file fungsi di direktori "./db/fungsi.php"

file pemanggil di direktori "main.php" (direktori root)

maka di "./db/fungsi.php" file nya jika ada selector path harus ganti yg awalnya "../" jadi "./"
karna harus relatif terhadap file "main.php"



- CODING 10
fungsi async dan await

const detail = document.querySelector('.class');

async function siap(){ //NOTE 1
const show = await mainpb(detail.value); //NOTE 2
}

function mainpb(value) { 
	value + 5;

}

NOTE :
NOTE 1 = BERI TAHU FUNGSI BAHWA AKAN ASYCRONIOS
NOTE 2 = BERHENTI SEMENTARA, BERJALAN KETIKA PROMISE SELESAI 

- CODING UPDATE 9
arti return pada fungsi

 function mainps(a,b) {
	let b = a + b;
	return b;
	// ADA HASIL MAKA PERLU RETURN
}

function mainpubji() {
	let a = document.querySelector('.class'); 
	//GK PERLU RETURN KARNA HANYA MENJALANKAN SCRIPT
}


NOTE: JIKA FUNGSI ITU MENGEMBALIKAN NILAI/HASIL
MAKA PAKAI RETURN JIKA TIDAK ATAU SIFATNYA
HANYA MENJALANKAN SCRIPT MAKA TIDAK PERLU RETURN


- CODING UPDATE 8
SYNCHRONUS CALLBACK

function tampil(nama){ //PERHATIKAN INI
	alert(`Hai ${nama}`); //PERHATIKAN INI

}

function input(callback){
	const nama = prompt("Masukkan nama: ");
	callback(nama); //INI YG DI MAKSUD CALLBACK
}

input(halo);

NOTE: PERHATIKAN DI ATAS fungsi input didalamnya ada
fungsi lagi bernama callback(nama); di mana kata "callback"
berasal dari parameter input dan nama berasal dari variabel
"const nama", jika di eksekusi itu akan mentrigger fungsi
tampil(nama); dimana di dalam parameter fungsi tampil
ada parameter bernama "nama"

- CODING UPDATE 7
DISTRUCSION JIKA BENTUK OBJEK
MAKA PROPERTI HARUS SAMA

CONTOH :

const nama = {
	nama: 'lana' //INI HARUS SAMA

};

const //INI HARUS SAMA =>{nama} = nama;

- CODING UPDATE 6
FILTER,MAP,REDUCE

const angka = [-1,8,9,1,4,-5,-4,3,2,9];

	function methodChain(){
		
	let find5 = angka.filter(a => a > 5) //TANGKAP ARRAY DAN FILTER
	.map(a => a*3) //PETAKAN SEMUA ISI ARRAY LALU TIAP ISI KALI 3
	.reduce((a,b)=> a+b ); //TANGKAP SEMUA ARRAY PADA MAP LALU JUMLAHKAN SEMUA
		
	console.log(find5);
		
		
	}
	
	methodChain();

NOTE: LIHAT PENJELASAN YG DI SLASH "//" DI ATAS
UNTUK MAP SIFATNYA MEMETAKAN DAN NILAINYA AKAN TETAP
SESUAI nilai paling terbaru dari hasil fungsi filter atau yg lain

- CODING UPDATE 5
PARAMETER BISA PANGGIL VARIABEL UTUH

CONTOH :
const angka = [-1,8,9,1,4,-5,-4,3,2,9];

const newAngka = angka.filter(function(a){ //PERHATIKAN INI

	return a >= 3; //PERHATIKAN INI

});

PERHATIKAN "function(a){}" ada sebuah parameter "a"
dimana parameter ini bisa memanggil variabel "angka"
lalu "a" ini bisa di gunakan ke dalam fungsi tersebut
sbg contoh di dalam fungsi nya ada "return a" dan untuk
nama dalam parameter bebas karna antara variabel angka
dan parameter a itu sebenarnya menyatu


- CODING UPDATE 4
HIGHER ORDER FUNCTION

CONTOH:
function repeat(n, action){
	for(let i = 0; i < n; i++){
		action(i);
	}

}

repeat(10, console.log); //tampilkan angka 1-10 dlm fungsi console.log

NOTE: PARAMETER BISA GANTI APAPUN TERMASUK FUNGSI
KYK CODING DI ATAS action(i) itu sama dgn console.log(i)
KENAPA? KARNA KITA PANGGIL FUNGSI NYA:
repeat(10, console.log);


- CODING UPDATE 3
FUNGSI SIFATNYA AKAN MENGECEK SCR GLOBAL
BKN LOCAL

CONTOH:
//DISINI GLOBAL

function(){
//DISINI CODING INDUK FUNGSI
var lana = "AGI";

setTimeout(function(){
//DISINI CODING ANAK FUNGSI
	lana = "lana" ? "IYA" : "BKN";
},600);

}

MAKA variabel lana AKAN MENGECEK KELUAR
FUNGSI INDUKNYA BKN NGECEK VARIABEL DALAM INDUK
INI JUGA KARNA fungsi setTimeout adalah fungsi bawaan
javascript yang kategorinya termasuk variabel global.
JIKA CODING DI ATAS DI JALANKAN AKAN EROR
KARNA variabel lana tidak ada di global SEDANGKAN
JIKA CEK DI GLOBAL PROGRAM AKAN MENGABAIKAN FUNGSI

- CODING UPDATE 2
ARROW FUNCTION TIDAK BISA MENGENALI THIS

CONTOH:
()=>{
	console.log(`${this.nama}`);

}

ADA THIS.NAMA MAKA AKAN EROR

NOTE: ARROW FUNCTION HANYA COCOK UNTUK
CHILD FUNGSI ATAU ANAK FUNGSI DIMANA ADA
SEBUAH FUNGSI LALU DI DALAMNYA DI ISI
SEBUAH FUNGSI LAGI ITU NAMANYA CHILD FUNGSI

- CODING UPDATE
EKSEKUSI CODING DI MULAI DARI BARIS PERTAMA
KE BAWAH

EKSEKUSI CODING AKAN MENGABAIKAN SEBUAH FUNGSI DAHULU

CONTOH TAHAPAN EKSEKUSI CODING DI DALAM FUNGSI

function( //3 ){
var ini = "aku" //2

return `Oke ${ini}`; //1
}

PERTAMA CODING AKAN MENGEKSEKUSI 
"//1" LALU CARI VARIABEL "ini" JIKA ADA 
MAKA SIMPAN JIKA TIDAK MAKA CARI DI
"//3" ATAU DI SEBUT ARGUMENT/PARAMETER
JIKA DISINI TIDAK ADA MAKA LANJUT CARI
MULAI DARI BARIS PALING PERTAMA CODING
HINGGA BAWAH

NOTE! : VARIABEL DI DALAM FUNGSI TIDAK BISA DI PANGGIL KELUAR
KARNA SDH MASUK LOCAL VARIABEL BKN GLOBAL VARIABEL

- UNTUK CODING
SEBAIKNYA GUNAKAN PERBANDINGAN SATU LOGIKA
CONTOH: 
if($var == "Aku"){

}

gunakan logika satu saja biar tidak bingung
seperti ini =>>> ($var == "Aku")

- PERINTAH UNTUK CEK KEASLIAN FILE DARI SUMBER ASLI :

WINDOWS CMD :
certutil -hashfile nama_file.iso/exe/dll SHA256 

LINUX :
sha256sum nama_file

MAC:
shasum -a 256 ~/Downloads/TopSecret.tgz

NOTE: ALGORITMA SESUAIKAN DENGAN ALGORITMA HASH FILE
NOTE: BISA JUGA UNTUK CEK FILE KORUP/FILE RUSAK DARI FILE ASLI
NOTE: BISA JUGA UNTUK BUAT HASH FILE SUPAYA KEASLIAN TERJAGA
BARIS PERINTAH NYA SAMA HANYA FILE HARUS KITA BUAT DULU

- STYLE CODING ADA 2 PERTAMA STRUKTURAL DAN PROSEDURAL
STRUKTURAL = BERDASARKAN VARIABEL
PROSEDURAL = BERDASARKAN OBJEK

- GUNAKAN FORMAT GAMBAR WEBP AGAR 
LEBIH CEPAT TPI KUALITAS TETAP BAGUS JGN GUNAKAN
SVG KARNA UNTUK ALASAN KEAMANAN (PELAJARI LEBIH LANJUT)

- TEKNIK HOTLINK SUPAYA AKSES IMG ATAU 
FILE LAIN TIDAK BISA DI AKSES LUAR WEB
(HEMAT RESOURCE)

- TEKNIK MINIFY UNTUK ENKRIP CODE 
SUPAYA KODE TIDAK DI BAJAK DAN MERINGANKAN FILE

- TEKNIK UNMINIFY UNTUK DEKSRIP CODE
MENERJEMAHKAN KODE YG MEMBINGUNGKAN

- TEKNIK OBFUSCATOR UNTUK ENKRIP KODE JS

- TEKNIK DEOBFUSCATOR UNTUK DESKRIP KODE JS

- Asynchronous Process memproses script scr bersama

- synchronous Process memproses script scr antrian

- HEXADESIMAL TERDIRI 16 KARAKTER
0123456789ABCDEF (16)

- DESIMAL TERDIRI 10 ANGKA
0123456789 (10)

- MAKSUD BIT (BINARY)
1     1     1     1     1     1     1     1  <  == (8bit = 1 byte ukuran)
128 64   32    16    8     4     2     1

- HEXDESIMAL KE DESIMAL
PERTAMA KONVERT KE ANGKA
3  	F
3  	15 (15 = F)

KEDUA URUTKAN PANGKAT DARI F KE 3 (16^0 , 16^1)
3	F
16^1     	16^0 ( ^ pangkat)

KETIGA HITUNG PANGKAT
16	1(karena cmn '1' 16 nya)

KE EMPAT KALIKAN
48	15
48 + 16 = 63 desimal










